/*
 * generated by Xtext 2.32.0
 */
package org.xtext.algorithme.algo.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.algorithme.algo.ide.contentassist.antlr.internal.InternalAlgoParser;
import org.xtext.algorithme.algo.services.AlgoGrammarAccess;

public class AlgoParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(AlgoGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, AlgoGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTypeRessourceAccess().getAlternatives(), "rule__TypeRessource__Alternatives");
			builder.put(grammarAccess.getDirectionAccess().getAlternatives(), "rule__Direction__Alternatives");
			builder.put(grammarAccess.getTypeDonneesAccess().getAlternatives(), "rule__TypeDonnees__Alternatives");
			builder.put(grammarAccess.getCatalogueAccess().getGroup(), "rule__Catalogue__Group__0");
			builder.put(grammarAccess.getAlgorithmeAccess().getGroup(), "rule__Algorithme__Group__0");
			builder.put(grammarAccess.getAlgorithmeAccess().getGroup_7(), "rule__Algorithme__Group_7__0");
			builder.put(grammarAccess.getRessourceAccess().getGroup(), "rule__Ressource__Group__0");
			builder.put(grammarAccess.getPortAccess().getGroup(), "rule__Port__Group__0");
			builder.put(grammarAccess.getCatalogueAccess().getNomAssignment_1(), "rule__Catalogue__NomAssignment_1");
			builder.put(grammarAccess.getCatalogueAccess().getAlgorithmesAssignment_3(), "rule__Catalogue__AlgorithmesAssignment_3");
			builder.put(grammarAccess.getAlgorithmeAccess().getNomAssignment_1(), "rule__Algorithme__NomAssignment_1");
			builder.put(grammarAccess.getAlgorithmeAccess().getDocumentationAssignment_4(), "rule__Algorithme__DocumentationAssignment_4");
			builder.put(grammarAccess.getAlgorithmeAccess().getRessourceAssignment_6(), "rule__Algorithme__RessourceAssignment_6");
			builder.put(grammarAccess.getAlgorithmeAccess().getPortAssignment_7_2(), "rule__Algorithme__PortAssignment_7_2");
			builder.put(grammarAccess.getRessourceAccess().getTypeAssignment_0(), "rule__Ressource__TypeAssignment_0");
			builder.put(grammarAccess.getRessourceAccess().getEmplacementAssignment_2(), "rule__Ressource__EmplacementAssignment_2");
			builder.put(grammarAccess.getPortAccess().getDirectionAssignment_0(), "rule__Port__DirectionAssignment_0");
			builder.put(grammarAccess.getPortAccess().getConstantAssignment_1(), "rule__Port__ConstantAssignment_1");
			builder.put(grammarAccess.getPortAccess().getNomAssignment_2(), "rule__Port__NomAssignment_2");
			builder.put(grammarAccess.getPortAccess().getTypeAssignment_4(), "rule__Port__TypeAssignment_4");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private AlgoGrammarAccess grammarAccess;

	@Override
	protected InternalAlgoParser createParser() {
		InternalAlgoParser result = new InternalAlgoParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public AlgoGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(AlgoGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
