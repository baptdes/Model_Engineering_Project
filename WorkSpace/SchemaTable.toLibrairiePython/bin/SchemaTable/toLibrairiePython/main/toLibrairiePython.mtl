[comment encoding = UTF-8 /]
[module toLibrairiePython('http://schematable','http://algorithme_table')]


[template public toLibrairiePython(aSchemaDeTable : SchemaDeTable)]
[comment @main/]
[file (aSchemaDeTable.nom + '.py', false, 'UTF-8')]


import csv
import inspect
from enum import Enum


# importation des algo
#fonctions signature
#entrée : - valeurs en entrée 
#         - ...
#         - valeurs en entrée 
#sortie ; - valeurs en sortie
[let conts : OrderedSet(Contrainte) = aSchemaDeTable.contraintes]
[for (  cont : Contrainte | conts->asSet()) ]
import [cont.algorithme.ressource.Emplacement/] as [cont.algorithme.nom/]
[/for]
[/let]
[let cbs : OrderedSet(Colonne) = aSchemaDeTable.colonnes]
[for (  cb : ColonneCalculee | cbs -> select(e | e.oclIsKindOf(ColonneCalculee))->asSet()) ]
import [cb.algorithme.ressource.Emplacement/] as [cb.algorithme.nom/]
[/for]
[/let]

[let cbs : OrderedSet(Colonne) = aSchemaDeTable.colonnes]
[for (  cb : ColonneEtrangere | cbs -> select(e | e.oclIsKindOf(ColonneEtrangere))->asSet()) ]

[let conts : OrderedSet(Contrainte) = cb.schemaEntree.contraintes]
[for (  cont : Contrainte | conts) ]
import [cont.algorithme.ressource.Emplacement/] as [cont.algorithme.nom/]
[/for]
[/let]
[let cbs : OrderedSet(Colonne) = cb.schemaEntree.colonnes]
[for (  cb : ColonneCalculee | cbs -> select(e | e.oclIsKindOf(ColonneCalculee))->asSet()) ]
import [cb.algorithme.ressource.Emplacement/] as [cb.algorithme.nom/]
[/for]
[/let]

[/for]
[/let]


class colonne:
    valeur = ['['/][']'/]
    type = "str"
    nom = ""

    def __init__(self,nom,type,id,Isimport = False):
        self.valeur = ['['/][']'/]
        self.type = type
        self.nom = nom
        self.Isimport = Isimport
        self.id = id



[let cbs : OrderedSet(Colonne) = aSchemaDeTable.colonnes]
[for (cb : ColonneEtrangere | cbs->select(e | e.oclIsKindOf(ColonneEtrangere))->collect(e | e.oclAsType(ColonneEtrangere))->asSet())]

class [cb.schemaEntree.nom/]:


    colonnes = ['['/][']'/]
    

    def getColonne(self,idColonne):
        for colonne in self.colonnes:
            if (idColonne == colonne.id):
                return colonne
    

    def __init__(self):
        [let cbs : OrderedSet(Colonne) = cb.schemaEntree.colonnes]
        self.colonnes = ['['/]
            [for (  cb : Colonne | cbs) separator(', ')]colonne("[cb.nom/]","[cb.typeDonnees/]","[cb.identifiant/]"[if (cb.oclIsKindOf(ColonneBrute))], True [/if])[/for][']'/]
        [/let]
        

 # permet de vérifier que la matrice est conforme
    # argument : - self classe
    # sortie : booléen, retourne true si le fichier a bien été importé et false sinon
    # affiche les messages d'avertissements ou d'erreurs 
    def verificationImport(self, contenue):  
        # vérification
        for ligne in range(1, len(contenue)):
            a = 0
            for colonne in range(0, len(self.colonnes)):
                if self.colonnes['['/]colonne[']'/].Isimport:
                    
                    # vérification de type
                    contenue['['/]ligne[']'/]['['/]a[']'/] = eval(self.colonnes['['/]a[']'/].type + "(\"" + contenue['['/]ligne[']'/]['['/]a[']'/] + "\")")    
                    
                    # ajout de la valeur dans le tableau 
                    self.colonnes['['/]a[']'/].valeur.append(contenue['['/]ligne[']'/]['['/]a[']'/])  
                    a += 1            
                        
        return True


    
    

    #permet d'importer in fichier CSV
    #argument : - self classe
    #           - fichierCSV : chemin du fichier CSV que l'on veut importer
    #sortie : booléen, retourne true si le fichier à bien été importé et false sinon
    def importationCSV(self,fichierCSV):
            with open(fichierCSV, mode='r', encoding='utf-8') as fichier:
                    fichierCSV = fichier
                    lecteur_csv = csv.reader(fichier)
                    contenue = ['['/]ligne for ligne in lecteur_csv[']'/]
                            #verification que la matrice importer est conforme aux contraintes et aux types
                    if not(self.verificationImport(contenue)):
                            print("retour false Calcul")                                                 



        
    def AjoutColonneReference(self, addresseTabRef):
        [let cbs : OrderedSet(Colonne) = cb.schemaEntree.colonnes]
        [let count : Integer = 0]
        
        [for (cb : ColonneEtrangere | cbs -> select(e | e.oclIsKindOf(ColonneEtrangere)))]
            a[cb.schemaEntree.nom/] = [cb.schemaEntree.nom/]()
            a[cb.schemaEntree.nom/].AjoutColonneReference(['['/][']'/])
            a[cb.schemaEntree.nom/].importationCSV(addresseTabRef['['/][count/][']'/])
            a[cb.schemaEntree.nom/].calcul()
            
            if not(a[cb.schemaEntree.nom/].verificationFinal):
                raise Exception("Erreur dans les vérifications")
                
            getColonne("[cb.identifiant/]").valeur = a[cb.schemaEntree.nom/].getColonne("[cb.identifiant/]").valeur
        [/for]
        
        [/let]
        [/let]
        
        print("Ajout Colonne Référence")



    def calcul(self):
        
        [let cbs : OrderedSet(Colonne) = cb.schemaEntree.colonnes]
        [for (  cb : ColonneCalculee | cbs -> select(e | e.oclIsKindOf(ColonneCalculee))) ]
        intermediaire = ['['/][']'/]
            
        #faire de l'introspection pour récupérer le nom de la fonction
        methodes = ['['/]name for name, obj in inspect.getmembers([cb.algorithme.nom/], inspect.isfunction)[']'/]
        #si il y a plusieurs méthode fini 
        if len(methodes) > 1:
            raise Exception("L'algo " + "[cb.algorithme.ressource.Emplacement/]" + "a trop de fonction alors que nous en voulons qu'une")
        for i in range(0,len(self.colonnes['['/]0[']'/].valeur)):
            #Il faut ajouter le nom du dossier de la fonction importer
            intermediaire.append(eval("[cb.algorithme.nom/]." + str(methodes['['/]0[']'/]) + "( [for ( id : String | cb.identifiantsColonnesEntree ) separator(', ')] self.getColonne(\"[id/]\").valeur['['/]i[']'/] [/for] )" ))
        self.getColonne("[cb.identifiant/]").valeur = intermediaire
        [/for]
        [/let]
        print("calcul des colonnes")
        



    #permet de vérifier que les calculs sont les bons
    #argument : - self classe
    #sortie : booléen, retourne true si le fichier à bien été importé et false sinon
    # affiche les messages d'avertissements ou d'éreurs 
    def verificationFinal(self):  
        #vérification des contraintes 
        [let conts : OrderedSet(Contrainte) = cb.schemaEntree.contraintes]
        [for (  cont : Contrainte | conts) ]
        
        #faire de l'introspection pour récupérer le nom de la fonction
        methodes = ['['/]name for name, obj in inspect.getmembers([cont.algorithme.nom/], inspect.isfunction)[']'/]
        #si il y a plusieurs méthode fini 
        if len(methodes) > 1:
            raise Exception("L'algo " + "[cont.algorithme.ressource.Emplacement/]" + "a trop de fonction alors que nous en voulons qu'une")
        for i in range(0,len(self.colonnes['['/]0[']'/].valeur)):
            #Il faut ajouter le nom du dossier de la fonction importer
            if eval("not([cont.algorithme.nom/]." + str(methodes['['/]0[']'/]) + "( [for ( id : String | cont.identifiantsColonnesEntree ) separator(', ')] self.getColonne(\"[id/]\").valeur['['/]i[']'/] [/for]  ))" ):
                return False  
        [/for]
        [/let]    
        print("vérification")
        return True
        

[/for]
[/let]




class [aSchemaDeTable.nom/]:


    colonnes = ['['/][']'/]
    

    def getColonne(self,idColonne):
        for colonne in self.colonnes:
            if (idColonne == colonne.id):
                return colonne
    

    def __init__(self):
        [let cbs : OrderedSet(Colonne) = aSchemaDeTable.colonnes]
        

        
        self.colonnes = ['['/]
            [for (  cb : Colonne | cbs) separator(', ')]
            colonne("[cb.nom/]","[cb.typeDonnees/]","[cb.identifiant/]"[if (cb.oclIsKindOf(ColonneBrute))], True [/if])
            [/for]
            [']'/]

        [/let]
        

 # permet de vérifier que la matrice est conforme
    # argument : - self classe
    # sortie : booléen, retourne true si le fichier a bien été importé et false sinon
    # affiche les messages d'avertissements ou d'erreurs 
    def verificationImport(self, contenue):  
        # vérification
        for ligne in range(1, len(contenue)):
            a = 0
            for colonne in range(0, len(self.colonnes)):
                if self.colonnes['['/]colonne[']'/].Isimport:
                    
                    # vérification de type
                    contenue['['/]ligne[']'/]['['/]a[']'/] = eval(self.colonnes['['/]a[']'/].type + "(\"" + contenue['['/]ligne[']'/]['['/]a[']'/] + "\")")    
                    
                    # ajout de la valeur dans le tableau 
                    self.colonnes['['/]a[']'/].valeur.append(contenue['['/]ligne[']'/]['['/]a[']'/])  
                    a += 1            
                        
        return True


    
    

    #permet d'importer in fichier CSV
    #argument : - self classe
    #           - fichierCSV : chemin du fichier CSV que l'on veut importer
    #sortie : booléen, retourne true si le fichier à bien été importé et false sinon
    def importationCSV(self,fichierCSV):
        try:
            with open(fichierCSV, mode='r', encoding='utf-8') as fichier:
                    fichierCSV = fichier
                    lecteur_csv = csv.reader(fichier)
                    contenue = ['['/]ligne for ligne in lecteur_csv[']'/]
                            #verification que la matrice importer est conforme aux contraintes et aux types
                    if not(self.verificationImport(contenue)):
                            print("retour false Calcul")                                                 
        except Exception as e:
            print("Erreur dans l'importation de Calcul")



        
    #permet d'ajouter les colonnes des autres tableaux
    def AjoutColonneReference(self,addresseTabRef):
        
        [let cbs : OrderedSet(Colonne) = aSchemaDeTable.colonnes]
        [let count : Integer = 0]
        [for (  cb : ColonneEtrangere | cbs -> select(e | e.oclIsKindOf(ColonneEtrangere))) ]
        a[cb.schemaEntree.nom/] = [cb.schemaEntree.nom/]()
        a[cb.schemaEntree.nom/].AjoutColonneReference(['['/][']'/])
        a[cb.schemaEntree.nom/].importationCSV(addresseTabRef['['/][count/][']'/])
        a[cb.schemaEntree.nom/].calcul()
        if not(a[cb.schemaEntree.nom/].verificationFinal()):
            raise Exception("Erreur dans les vérifications")
        self.getColonne("[cb.identifiant/]").valeur = a[cb.schemaEntree.nom/].getColonne("[cb.schemaEntree.nom/].[cb.nomColonneEtrangere/]").valeur
        [/for]
        [/let]
        [/let]



    def calcul(self):
        
        [let cbs : OrderedSet(Colonne) = aSchemaDeTable.colonnes]
        [for (  cb : ColonneCalculee | cbs -> select(e | e.oclIsKindOf(ColonneCalculee))) ]
        intermediaire = ['['/][']'/]
            
        #faire de l'introspection pour récupérer le nom de la fonction
        methodes = ['['/]name for name, obj in inspect.getmembers([cb.algorithme.nom/], inspect.isfunction)[']'/]
        #si il y a plusieurs méthode fini 
        if len(methodes) > 1:
            raise Exception("L'algo " + "[cb.algorithme.ressource.Emplacement/]" + "a trop de fonction alors que nous en voulons qu'une")
        for i in range(0,len(self.colonnes['['/]0[']'/].valeur)):
            #Il faut ajouter le nom du dossier de la fonction importer
            intermediaire.append(eval("[cb.algorithme.nom/]." + str(methodes['['/]0[']'/]) + "( [for ( id : String | cb.identifiantsColonnesEntree ) separator(', ')] self.getColonne(\"[id/]\").valeur['['/]i[']'/] [/for] )" ))
        self.getColonne("[cb.identifiant/]").valeur = intermediaire
        [/for]
        [/let]
        print("calcul des colonnes")
        



    #permet de vérifier que les calculs sont les bons
    #argument : - self classe
    #sortie : booléen, retourne true si le fichier à bien été importé et false sinon
    # affiche les messages d'avertissements ou d'éreurs 
    def verificationFinal(self):  
        #vérification des contraintes 
        [let conts : OrderedSet(Contrainte) = aSchemaDeTable.contraintes]
        [for (  cont : Contrainte | conts) ]
        
        #faire de l'introspection pour récupérer le nom de la fonction
        methodes = ['['/]name for name, obj in inspect.getmembers([cont.algorithme.nom/], inspect.isfunction)[']'/]
        #si il y a plusieurs méthode fini 
        if len(methodes) > 1:
            raise Exception("L'algo " + "[cont.algorithme.ressource.Emplacement/]" + "a trop de fonction alors que nous en voulons qu'une")
        for i in range(0,len(self.colonnes['['/]0[']'/].valeur)):
            #Il faut ajouter le nom du dossier de la fonction importer
            if eval("not([cont.algorithme.nom/]." + str(methodes['['/]0[']'/]) + "( [for ( id : String | cont.identifiantsColonnesEntree ) separator(', ')] self.getColonne(\"[id/]\").valeur['['/]i[']'/] [/for] ))" ):
                return False
        [/for]
        [/let]    
        print("vérification")
        return True

        


        
    


    def ExportationCSV(self):
        # Écriture des données dans le fichier CSV
        with open("fichierSortie.csv", mode='w', newline='', encoding='utf-8') as fichier_csv: 
            writer = csv.writer(fichier_csv) 
            
            # création de la matrice adéquate :
            taille = len(self.colonnes['['/]0[']'/].valeur)
            donnees = ['['/]['['/][']'/] for i in range(0, taille + 1)[']'/]
            
            # colonne de référence
            for colonne in self.colonnes:
                donnees['['/]0[']'/].append(colonne.nom)
                for ligne in range(0, taille):
                    donnees['['/]ligne + 1[']'/].append(colonne.valeur['['/]ligne[']'/])
            
            writer.writerows(donnees)  # Écrit chaque ligne du dictionnaire

    

tabCal = [aSchemaDeTable.nom/]()
tabadd = input('rentrer les addresses des csv des schemas tables etranger : ')
tabCal.AjoutColonneReference(['['/]tabadd[']'/])
couradd = input('rentrer l\'addresses du csv du schema table courrant : ')
tabCal.importationCSV(couradd)
tabCal.calcul()
if not(tabCal.verificationFinal()):
	raise Exception("erreur de contrainte")
tabCal.ExportationCSV()

[/file]
[/template]