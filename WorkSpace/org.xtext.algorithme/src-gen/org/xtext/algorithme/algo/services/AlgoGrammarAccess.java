/*
 * generated by Xtext 2.32.0
 */
package org.xtext.algorithme.algo.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AlgoGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class CatalogueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.algorithme.algo.Algo.Catalogue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCatalogueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomIDTerminalRuleCall_1_0 = (RuleCall)cNomAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAlgorithmesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAlgorithmesAlgorithmeParserRuleCall_3_0 = (RuleCall)cAlgorithmesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Catalogue:
		//    'catalogue' nom=ID '{'
		//        algorithmes+=Algorithme*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'catalogue' nom=ID '{'
		//    algorithmes+=Algorithme*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'catalogue'
		public Keyword getCatalogueKeyword_0() { return cCatalogueKeyword_0; }
		
		//nom=ID
		public Assignment getNomAssignment_1() { return cNomAssignment_1; }
		
		//ID
		public RuleCall getNomIDTerminalRuleCall_1_0() { return cNomIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//algorithmes+=Algorithme*
		public Assignment getAlgorithmesAssignment_3() { return cAlgorithmesAssignment_3; }
		
		//Algorithme
		public RuleCall getAlgorithmesAlgorithmeParserRuleCall_3_0() { return cAlgorithmesAlgorithmeParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AlgorithmeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.algorithme.algo.Algo.Algorithme");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlgorithmKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomIDTerminalRuleCall_1_0 = (RuleCall)cNomAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDocumentationKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDocumentationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDocumentationSTRINGTerminalRuleCall_4_0 = (RuleCall)cDocumentationAssignment_4.eContents().get(0);
		private final Keyword cRessourceKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRessourceAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRessourceRessourceParserRuleCall_6_0 = (RuleCall)cRessourceAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cPortsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cPortAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cPortPortParserRuleCall_7_2_0 = (RuleCall)cPortAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Algorithme:
		//    'algorithm' nom=ID '{'
		//        'documentation' documentation=STRING
		//        'ressource' ressource=Ressource
		//        ('ports' '{' port+=Port* '}')?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'algorithm' nom=ID '{'
		//    'documentation' documentation=STRING
		//    'ressource' ressource=Ressource
		//    ('ports' '{' port+=Port* '}')?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'algorithm'
		public Keyword getAlgorithmKeyword_0() { return cAlgorithmKeyword_0; }
		
		//nom=ID
		public Assignment getNomAssignment_1() { return cNomAssignment_1; }
		
		//ID
		public RuleCall getNomIDTerminalRuleCall_1_0() { return cNomIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'documentation'
		public Keyword getDocumentationKeyword_3() { return cDocumentationKeyword_3; }
		
		//documentation=STRING
		public Assignment getDocumentationAssignment_4() { return cDocumentationAssignment_4; }
		
		//STRING
		public RuleCall getDocumentationSTRINGTerminalRuleCall_4_0() { return cDocumentationSTRINGTerminalRuleCall_4_0; }
		
		//'ressource'
		public Keyword getRessourceKeyword_5() { return cRessourceKeyword_5; }
		
		//ressource=Ressource
		public Assignment getRessourceAssignment_6() { return cRessourceAssignment_6; }
		
		//Ressource
		public RuleCall getRessourceRessourceParserRuleCall_6_0() { return cRessourceRessourceParserRuleCall_6_0; }
		
		//('ports' '{' port+=Port* '}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'ports'
		public Keyword getPortsKeyword_7_0() { return cPortsKeyword_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//port+=Port*
		public Assignment getPortAssignment_7_2() { return cPortAssignment_7_2; }
		
		//Port
		public RuleCall getPortPortParserRuleCall_7_2_0() { return cPortPortParserRuleCall_7_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class RessourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.algorithme.algo.Algo.Ressource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeRessourceEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cPathKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEmplacementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEmplacementSTRINGTerminalRuleCall_2_0 = (RuleCall)cEmplacementAssignment_2.eContents().get(0);
		
		//Ressource:
		//    type=TypeRessource 'path' emplacement=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//type=TypeRessource 'path' emplacement=STRING
		public Group getGroup() { return cGroup; }
		
		//type=TypeRessource
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//TypeRessource
		public RuleCall getTypeTypeRessourceEnumRuleCall_0_0() { return cTypeTypeRessourceEnumRuleCall_0_0; }
		
		//'path'
		public Keyword getPathKeyword_1() { return cPathKeyword_1; }
		
		//emplacement=STRING
		public Assignment getEmplacementAssignment_2() { return cEmplacementAssignment_2; }
		
		//STRING
		public RuleCall getEmplacementSTRINGTerminalRuleCall_2_0() { return cEmplacementSTRINGTerminalRuleCall_2_0; }
	}
	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.algorithme.algo.Algo.Port");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectionDirectionEnumRuleCall_0_0 = (RuleCall)cDirectionAssignment_0.eContents().get(0);
		private final Assignment cConstantAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cConstantConstantKeyword_1_0 = (Keyword)cConstantAssignment_1.eContents().get(0);
		private final Assignment cNomAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNomIDTerminalRuleCall_2_0 = (RuleCall)cNomAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeTypeDonneesEnumRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		
		//Port:
		//    direction=Direction constant?='constant'? nom=ID ':' type=TypeDonnees;
		@Override public ParserRule getRule() { return rule; }
		
		//direction=Direction constant?='constant'? nom=ID ':' type=TypeDonnees
		public Group getGroup() { return cGroup; }
		
		//direction=Direction
		public Assignment getDirectionAssignment_0() { return cDirectionAssignment_0; }
		
		//Direction
		public RuleCall getDirectionDirectionEnumRuleCall_0_0() { return cDirectionDirectionEnumRuleCall_0_0; }
		
		//constant?='constant'?
		public Assignment getConstantAssignment_1() { return cConstantAssignment_1; }
		
		//'constant'
		public Keyword getConstantConstantKeyword_1_0() { return cConstantConstantKeyword_1_0; }
		
		//nom=ID
		public Assignment getNomAssignment_2() { return cNomAssignment_2; }
		
		//ID
		public RuleCall getNomIDTerminalRuleCall_2_0() { return cNomIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//type=TypeDonnees
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//TypeDonnees
		public RuleCall getTypeTypeDonneesEnumRuleCall_4_0() { return cTypeTypeDonneesEnumRuleCall_4_0; }
	}
	
	public class TypeRessourceElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.algorithme.algo.Algo.TypeRessource");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPythonEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPythonPythonKeyword_0_0 = (Keyword)cPythonEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cScriptEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cScriptScriptKeyword_1_0 = (Keyword)cScriptEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum TypeRessource:
		//    Python | Script;
		public EnumRule getRule() { return rule; }
		
		//Python | Script
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Python
		public EnumLiteralDeclaration getPythonEnumLiteralDeclaration_0() { return cPythonEnumLiteralDeclaration_0; }
		
		public Keyword getPythonPythonKeyword_0_0() { return cPythonPythonKeyword_0_0; }
		
		//Script
		public EnumLiteralDeclaration getScriptEnumLiteralDeclaration_1() { return cScriptEnumLiteralDeclaration_1; }
		
		public Keyword getScriptScriptKeyword_1_0() { return cScriptScriptKeyword_1_0; }
	}
	public class DirectionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.algorithme.algo.Algo.Direction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEntreeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEntreeEntreeKeyword_0_0 = (Keyword)cEntreeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSortieEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSortieSortieKeyword_1_0 = (Keyword)cSortieEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Direction:
		//    Entree | Sortie;
		public EnumRule getRule() { return rule; }
		
		//Entree | Sortie
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Entree
		public EnumLiteralDeclaration getEntreeEnumLiteralDeclaration_0() { return cEntreeEnumLiteralDeclaration_0; }
		
		public Keyword getEntreeEntreeKeyword_0_0() { return cEntreeEntreeKeyword_0_0; }
		
		//Sortie
		public EnumLiteralDeclaration getSortieEnumLiteralDeclaration_1() { return cSortieEnumLiteralDeclaration_1; }
		
		public Keyword getSortieSortieKeyword_1_0() { return cSortieSortieKeyword_1_0; }
	}
	public class TypeDonneesElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.algorithme.algo.Algo.TypeDonnees");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIntIntKeyword_0_0 = (Keyword)cIntEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFloatEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFloatFloatKeyword_1_0 = (Keyword)cFloatEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cStrEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cStrStrKeyword_2_0 = (Keyword)cStrEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBoolEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBoolBoolKeyword_3_0 = (Keyword)cBoolEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum TypeDonnees:
		//    int | float | str | bool;
		public EnumRule getRule() { return rule; }
		
		//int | float | str | bool
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//int
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_0() { return cIntEnumLiteralDeclaration_0; }
		
		public Keyword getIntIntKeyword_0_0() { return cIntIntKeyword_0_0; }
		
		//float
		public EnumLiteralDeclaration getFloatEnumLiteralDeclaration_1() { return cFloatEnumLiteralDeclaration_1; }
		
		public Keyword getFloatFloatKeyword_1_0() { return cFloatFloatKeyword_1_0; }
		
		//str
		public EnumLiteralDeclaration getStrEnumLiteralDeclaration_2() { return cStrEnumLiteralDeclaration_2; }
		
		public Keyword getStrStrKeyword_2_0() { return cStrStrKeyword_2_0; }
		
		//bool
		public EnumLiteralDeclaration getBoolEnumLiteralDeclaration_3() { return cBoolEnumLiteralDeclaration_3; }
		
		public Keyword getBoolBoolKeyword_3_0() { return cBoolBoolKeyword_3_0; }
	}
	
	private final CatalogueElements pCatalogue;
	private final AlgorithmeElements pAlgorithme;
	private final RessourceElements pRessource;
	private final TypeRessourceElements eTypeRessource;
	private final PortElements pPort;
	private final DirectionElements eDirection;
	private final TypeDonneesElements eTypeDonnees;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AlgoGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pCatalogue = new CatalogueElements();
		this.pAlgorithme = new AlgorithmeElements();
		this.pRessource = new RessourceElements();
		this.eTypeRessource = new TypeRessourceElements();
		this.pPort = new PortElements();
		this.eDirection = new DirectionElements();
		this.eTypeDonnees = new TypeDonneesElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.algorithme.algo.Algo".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Catalogue:
	//    'catalogue' nom=ID '{'
	//        algorithmes+=Algorithme*
	//    '}';
	public CatalogueElements getCatalogueAccess() {
		return pCatalogue;
	}
	
	public ParserRule getCatalogueRule() {
		return getCatalogueAccess().getRule();
	}
	
	//Algorithme:
	//    'algorithm' nom=ID '{'
	//        'documentation' documentation=STRING
	//        'ressource' ressource=Ressource
	//        ('ports' '{' port+=Port* '}')?
	//    '}';
	public AlgorithmeElements getAlgorithmeAccess() {
		return pAlgorithme;
	}
	
	public ParserRule getAlgorithmeRule() {
		return getAlgorithmeAccess().getRule();
	}
	
	//Ressource:
	//    type=TypeRessource 'path' emplacement=STRING;
	public RessourceElements getRessourceAccess() {
		return pRessource;
	}
	
	public ParserRule getRessourceRule() {
		return getRessourceAccess().getRule();
	}
	
	//enum TypeRessource:
	//    Python | Script;
	public TypeRessourceElements getTypeRessourceAccess() {
		return eTypeRessource;
	}
	
	public EnumRule getTypeRessourceRule() {
		return getTypeRessourceAccess().getRule();
	}
	
	//Port:
	//    direction=Direction constant?='constant'? nom=ID ':' type=TypeDonnees;
	public PortElements getPortAccess() {
		return pPort;
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}
	
	//enum Direction:
	//    Entree | Sortie;
	public DirectionElements getDirectionAccess() {
		return eDirection;
	}
	
	public EnumRule getDirectionRule() {
		return getDirectionAccess().getRule();
	}
	
	//enum TypeDonnees:
	//    int | float | str | bool;
	public TypeDonneesElements getTypeDonneesAccess() {
		return eTypeDonnees;
	}
	
	public EnumRule getTypeDonneesRule() {
		return getTypeDonneesAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
